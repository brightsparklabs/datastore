/*
 * Created by brightSPARK Labs
 * www.brightsparklabs.com
 */

// -----------------------------------------------------------------------------
// PLUGINS
// -----------------------------------------------------------------------------

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'

    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the spotbugs plugin for code quality
    id 'com.github.spotbugs' version '2.0.0'

    // Apply the jacoco plugin for test coverage
    id 'jacoco'

    // Apply the annotation processing plugins
    id "net.ltgt.apt" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"

    // Apply bintray plugin for publishing artifacts
    id "maven-publish"
    // Maven Central requires artifacts to be signed.
    id 'signing'
    // Maven Central requires artifacts to be released via Sonatype Nexus.
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// -----------------------------------------------------------------------------
// PROJECT IDENTIFICATION
// -----------------------------------------------------------------------------

project.description = 'Library for storing/retrieving data by id into a backing store'
project.ext.url     = 'https://github.com/brightsparklabs/datastore'
project.ext.scm     = 'https://github.com/brightsparklabs/datastore.git'
project.group       = 'com.brightsparklabs'
project.version     = 'git describe --always --dirty'.execute().text.trim()

project.version = '0.1.0-1'

// -----------------------------------------------------------------------------
// REPOSITORIES/DEPENDENCIES
// -----------------------------------------------------------------------------

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    def versions = [
            immutablesVersion: '2.7.4',
    ]

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation(
            // General
            'com.google.guava:guava:27.0.1-jre',
    )

    compileOnly(
            "org.immutables:value:${versions.immutablesVersion}",
    )

    testImplementation(
            // Use the awesome Spock testing and specification framework even with Java
            'org.spockframework:spock-core:1.2-groovy-2.5',
            'junit:junit:4.12',
            // Allow spock to mock non-interfaces
            'net.bytebuddy:byte-buddy:1.10.1',

            // So that we can suppress some spotbugs reports
            'com.github.spotbugs:spotbugs-annotations:3.1.12',
    )

    annotationProcessor(
            "org.immutables:value:${versions.immutablesVersion}",
    )
}

// -----------------------------------------------------------------------------
// GENERATED CODE CONFIG
// -----------------------------------------------------------------------------

ext {
    generatedSourcesDir = 'build/generated/source/apt/main'
}

dependencies {
    // We add this so that Immutables will annotate its generated classes with
    // @SuppressFBWarnings, and thus avoid FindBugs/SpotBugs errors for those generated classes.
    compileOnly group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
}

sourceSets {
    main.java.srcDirs += generatedSourcesDir
}

// -----------------------------------------------------------------------------
// GENERATE CODE QUALITY REPORT (via spotbugs)
// -----------------------------------------------------------------------------

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// -----------------------------------------------------------------------------
// GENERATE CODE COVERAGE REPORT (via jacoco)
// -----------------------------------------------------------------------------

jacocoTestReport {
    reports {
        html.enabled = true
    }
}

// -----------------------------------------------------------------------------
// SETUP ARTIFACTS FOR PUBLISHING
// -----------------------------------------------------------------------------

// Include javadoc and sources (requirements for publishing to Maven Central)
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java

            artifact sourcesJar
            artifact javadocJar

            // Maven Central requires specific POM attributes.
            pom {
                name = project.name
                description = project.description
                url = project.url

                scm {
                    connection = project.scm
                    developerConnection = project.scm
                    url = project.scm
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id = 'brightsparklabs'
                        name = 'brightSPARK Labs'
                        email = 'enquire@brightsparklabs.com'
                    }
                }
            }
        }
    }
}

// Maven Central requires signed artifacts.
signing {
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava

    // Only require signing when publishing (otherwise normal builds would need GPG keys).
    required { gradle.taskGraph.hasTask('publishToSonatype') }
}

// -----------------------------------------------------------------------------
// PUBLISH ARTIFACTS (via nexus)
// -----------------------------------------------------------------------------

nexusPublishing {
    repositories {
        // Credentials default to:
        // - Property `sonatypeUsername` or ENV variable `ORG_GRADLE_PROJECT_sonatypeUsername`.
        // - Property `sonatypePassword` or ENV variable ORG_GRADLE_PROJECT_sonatypePassword`.
        sonatype()
    }
}


task prePublishToMavenCentral {
    group 'brightSPARK Labs - Maven Central Publishing'
    description 'Stages the release on Sonatype ready for publishing to Maven Central.'
    dependsOn 'publishToSonatype', 'closeSonatypeStagingRepository'
}
task publishToMavenCentral {
    group 'brightSPARK Labs - Maven Central Publishing'
    description 'Publishes the release to Maven Central.'
    dependsOn 'publishToSonatype', 'closeAndReleaseSonatypeStagingRepository'
}
